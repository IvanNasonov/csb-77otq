{"version":3,"sources":["functions/generate.otp.js","authentication/auth.js","components/input.field.js","pages/otp.check.js","pages/login.js","authentication/login.cred.js","components/card.js","components/type.selector.js","components/header.main.js","api/fetchCards.js","api/fetchTypes.js","api/fetchSubtypes.js","functions/generatePageLinks.js","components/card.loading.js","pages/main.js","api/fetchCard.js","components/header.card.view.js","pages/card.view.js","authentication/protected.route.js","index.js"],"names":["generateOTP","otp","Math","floor","random","toString","length","i","setTimeout","alert","console","log","this","authenticated","passedOTPCheck","passedOTPChaeck","InputField","props","className","id","myId","type","value","onChange","event","handleChange","required","htmlFor","label","OTPCheck","useState","input","setInput","currOTP","setOTP","time","setTime","codeExpired","setCodeExpiration","failedOTP","setOTPFail","useEffect","timerInt","setInterval","clearInterval","target","onClick","auth","passOTPCheck","history","push","Login","email","password","authFail","setAuthFail","e","toLowerCase","authenticate","eraseOTPCheck","Card","to","src","imageUrl","alt","name","artist","TypeSelector","open","setOpen","generateTypeList","curr","idx","selectedTypes","includes","selectType","text","icon","faAngleDown","placeholder","map","types","filter","HeaderMain","subtypes","selectedSubtypes","selectSubtype","logout","axios","require","fetchCards","a","pageNum","method","url","join","headers","cards","data","fetchTypes","fetchSubtypes","generatePageLinks","pageStr","numCards","pagesArr","maxPage","ceil","pageInt","parseInt","j","Number","isInteger","CardLoading","Main","setCards","typesList","setTypesList","pageLinks","setPageLinks","isLoaded","setIsLoaded","getCardsData","page","match","params","cardsData","totalCount","getTypesData","typesData","subtypesData","location","val","sort","card","images","small","arr","generateLoadingTemplates","fetchCard","HeaderCardView","useHistory","goBack","CardView","cardData","setCardData","getCardData","fetchedCardData","large","supertype","attacks","damage","convertedEnergyCost","weaknesses","hp","flavorText","rules","ProtectedRoute","Component","component","rest","render","exact","pathname","state","from","App","path","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.e9a02cf8.chunk.js","sourcesContent":["export const generateOTP = () => {\r\n  let otp = Math.floor(Math.random() * 100000).toString(10);\r\n  if (otp.length < 6) {\r\n    for (let i = 1; i <= 7 - otp.length; i++) {\r\n      otp = \"0\" + otp;\r\n    }\r\n  }\r\n\r\n  const func = () => alert(\"Your code is: \" + otp);\r\n  setTimeout(func, 1000);\r\n  console.log(\"Your code is: \" + otp);\r\n  return otp;\r\n};\r\n","class Auth {\r\n  constructor() {\r\n    this.authenticated = false; // true if login credentials entered correctly\r\n    this.passedOTPCheck = false; // true if passed otp check\r\n  }\r\n\r\n  authenticate() {\r\n    // call after entering email and password correctly\r\n    this.authenticated = true;\r\n  }\r\n\r\n  passOTPCheck() {\r\n    //call after passing otp check\r\n    this.passedOTPCheck = true;\r\n  }\r\n\r\n  eraseOTPCheck() {\r\n    this.passedOTPCheck = false;\r\n  }\r\n\r\n  logout() {\r\n    this.authenticated = false;\r\n    this.passedOTPChaeck = false;\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return this.authenticated;\r\n  }\r\n}\r\n\r\nexport default new Auth();\r\n","export const InputField = (props) => {\r\n  return (\r\n    <div className=\"input-wrapper\">\r\n      <input\r\n        className={props.className}\r\n        id={props.myId}\r\n        type={props.type}\r\n        value={props.value}\r\n        onChange={(event) => props.handleChange(event)}\r\n        required\r\n      />\r\n      <label htmlFor={props.type} className=\"input-label\">\r\n        {props.label}\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { generateOTP } from \"../functions/generate.otp\";\r\nimport auth from \"../authentication/auth\";\r\nimport { InputField } from \"../components/input.field\";\r\n\r\nexport const OTPCheck = (props) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [currOTP, setOTP] = useState(() => generateOTP());\r\n  const [time, setTime] = useState(120);\r\n  const [codeExpired, setCodeExpiration] = useState(false);\r\n  const [failedOTP, setOTPFail] = useState(false);\r\n\r\n  const tick = () => {\r\n    if (time > 0) {\r\n      setTime(time - 1);\r\n    } else {\r\n      setCodeExpiration(true);\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setTime(120);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timerInt = setInterval(() => tick(), 1000);\r\n    return () => clearInterval(timerInt);\r\n  }, [time]);\r\n\r\n  const checkOTP = () => {\r\n    if (!codeExpired && currOTP === input) {\r\n      auth.passOTPCheck();\r\n      props.history.push(\"/main/page=1\");\r\n    } else {\r\n      setOTPFail(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"otp-wrapper\">\r\n      <div className=\"otp\">\r\n        <h1 id=\"otp-header\">Enter code form SMS</h1>\r\n        <h2 id=\"time-display\">\r\n          {time > 0\r\n            ? \"Your code will expire in: \" + time + \" seconds\"\r\n            : \"Your code has expired\"}\r\n        </h2>\r\n        <InputField\r\n          className={failedOTP ? \"input-field failed-auth\" : \"input-field\"}\r\n          myId=\"otp-check\"\r\n          label=\"Enter code here:\"\r\n          value={input}\r\n          handleChange={(event) => handleChange(event)}\r\n        />\r\n        <button className=\"button\" onClick={checkOTP}>\r\n          Submit\r\n        </button>\r\n        <button\r\n          id=\"verification-code-button\"\r\n          className=\"button\"\r\n          onClick={() => {\r\n            setOTP(generateOTP());\r\n            setCodeExpiration(false);\r\n            reset();\r\n          }}\r\n        >\r\n          Send another code\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from \"react\";\nimport { email, password } from \"../authentication/login.cred\";\nimport auth from \"../authentication/auth\";\nimport { InputField } from \"../components/input.field\";\n\nexport const Login = (props) => {\n  const [input, setInput] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [authFail, setAuthFail] = useState(false);\n\n  const handleChange = (e) => {\n    if (e.target.type === \"password\") {\n      setInput({\n        ...input,\n        password: e.target.value\n      });\n    } else {\n      setInput({\n        ...input,\n        email: e.target.value.toLowerCase()\n      });\n    }\n  };\n\n  // checks whether login credentials match what is in the input, if it does, moves on to the next stage\n  const checkLogin = () => {\n    if (email === input.email && password === input.password) {\n      auth.authenticate();\n      auth.eraseOTPCheck(); // this is here in case someone passes otp check first since otp check is not protected\n      props.history.push(\"/otp\");\n    } else {\n      setAuthFail(true);\n    }\n  };\n\n  return (\n    <div className=\"login-wrapper\">\n      <div className=\"login\">\n        <InputField\n          className={!authFail ? \"input-field\" : \"input-field failed-auth\"}\n          myId=\"email\"\n          type=\"\" //this is blank because of the way floating labels are set up\n          label=\"Email\"\n          value={input.email}\n          handleChange={(e) => handleChange(e)}\n        />\n        <InputField\n          className={!authFail ? \"input-field\" : \"input-field failed-auth\"}\n          id=\"password\"\n          type=\"password\"\n          label=\"Password\"\n          value={input.password}\n          handleChange={(e) => handleChange(e)}\n        />\n        <button className=\"button\" onClick={() => checkLogin()}>\n          Log in\n        </button>\n        <p\n          className={authFail ? \"failed-auth-text failed\" : \"failed-auth-text\"}\n        >\n          Your email or password are not correct, please try again\n        </p>\n      </div>\n    </div>\n  );\n};\n","export const email = \"kode@kode.ru\";\r\nexport const password = \"Enk0deng\";\r\n","import { Link } from \"react-router-dom\";\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <Link to={\"/card/id=\" + props.id}>\r\n      <div className=\"card-wrapper\">\r\n        <div className=\"card\">\r\n          <img\r\n            className=\"card-image\"\r\n            src={props.imageUrl}\r\n            alt={props.name + \"card\"}\r\n          />\r\n          <h1 className=\"card-name\">{props.name}</h1>\r\n          <h2 className=\"card-artist\">Art by {props.artist}</h2>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const TypeSelector = (props) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  // callback function to use in the mapping of the type arrays passed from props,\r\n  // returns jsx elements\r\n  const generateTypeList = (curr, idx) => {\r\n    return (\r\n      <div\r\n        key={idx}\r\n        className={\r\n          props.selectedTypes.includes(curr)\r\n            ? \"type-item selected\"\r\n            : \"type-item\"\r\n        }\r\n        onClick={() => props.selectType(curr)}\r\n      >\r\n        <p className=\"type-item-text\">{curr}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className={open ? \"type-select open\" : \"type-select\"}>\r\n      <p className=\"type-select-text\">{props.text}</p>\r\n      <FontAwesomeIcon\r\n        onClick={() => setOpen(!open)}\r\n        className={open ? \"type-select-icon open\" : \"type-select-icon\"}\r\n        icon={faAngleDown}\r\n      />\r\n      <div className={open ? \"type-list\" : \"type-list closed\"}>\r\n        <input\r\n          className=\"search\"\r\n          type=\"search\"\r\n          placeholder=\"Search...\"\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n        {/* if no types selected will be empty*/}\r\n        {props.selectedTypes === []\r\n          ? null\r\n          : props.selectedTypes.map((curr, idx) => generateTypeList(curr, idx))}\r\n        {/* if the input is empty will ereturn unselected types, if not will return\r\n        a filtered array according to input */}\r\n        {input !== \"\"\r\n          ? props.types\r\n              .filter((curr) =>\r\n                curr.toLowerCase().includes(input.toLowerCase())\r\n              )\r\n              .map((curr, idx) => generateTypeList(curr, idx))\r\n          : props.types.map((curr, idx) => generateTypeList(curr, idx))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { TypeSelector } from \"./type.selector\";\r\n\r\nexport const HeaderMain = (props) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <TypeSelector\r\n        text=\"Select type\"\r\n        types={props.types}\r\n        selectedTypes={props.selectedTypes}\r\n        selectType={props.selectType}\r\n      />\r\n      <TypeSelector\r\n        text=\"Select subtype\"\r\n        types={props.subtypes}\r\n        selectedTypes={props.selectedSubtypes}\r\n        selectType={props.selectSubtype}\r\n      />\r\n      <button id=\"logout\" className=\"button\" onClick={props.logout}>\r\n        Log out\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","const axios = require(\"axios\");\r\n\r\nexport const fetchCards = async (pageNum = 1, types = [], subtypes = []) => {\r\n  let cards = await axios({\r\n    method: \"get\",\r\n    url: `https://api.pokemontcg.io/v2/cards?q=${types\r\n      .map((curr) => \"%20types:\" + curr)\r\n      .join(\"\")}${subtypes\r\n      .map((curr) => \"%20subtypes:\" + curr)\r\n      .join(\"\")}&page=${pageNum}&pageSize=18`,\r\n    headers: {\r\n      \"X-Api-Key\": \"4d6e33b2-b46f-4b28-814d-786e33f19bc1\"\r\n    }\r\n  });\r\n  return cards.data;\r\n};\r\n","const axios = require(\"axios\");\r\n\r\nexport const fetchTypes = async () => {\r\n  let types = await axios({\r\n    type: \"get\",\r\n    url: \"https://api.pokemontcg.io/v2/types\",\r\n    headers: {\r\n      \"X-Api-Key\": \"4d6e33b2-b46f-4b28-814d-786e33f19bc1\"\r\n    }\r\n  });\r\n\r\n  return types.data.data;\r\n};\r\n","const axios = require(\"axios\");\r\n\r\nexport const fetchSubtypes = async () => {\r\n  let subtypes = await axios({\r\n    type: \"get\",\r\n    url: \"https://api.pokemontcg.io/v2/subtypes\",\r\n    headers: {\r\n      \"X-Api-Key\": \"4d6e33b2-b46f-4b28-814d-786e33f19bc1\"\r\n    }\r\n  });\r\n\r\n  return subtypes.data.data;\r\n};\r\n","import { Link } from \"react-router-dom\";\r\n\r\nexport const generatePageLinks = (pageStr, numCards) => {\r\n  let pagesArr = [];\r\n  let maxPage = Math.ceil(numCards / 18);\r\n  let pageInt = parseInt(pageStr, 10);\r\n\r\n  // checks for edge cases and returns the appropriate list of\r\n  // pages that will go to the paginator at the bottom of the page\r\n  if (pageInt < 5) {\r\n    pagesArr = [1, 2, 3, 4, 5, \"..\", maxPage];\r\n  } else if (pageInt > maxPage - 4 || pageInt > maxPage) {\r\n    for (let i = maxPage - 4; i <= maxPage; i++) {\r\n      pagesArr.push(i);\r\n    }\r\n    pagesArr = [1, \"..\", ...pagesArr];\r\n  } else {\r\n    for (let j = pageInt - 2; j <= pageInt + 2; j++) {\r\n      pagesArr.push(j);\r\n    }\r\n    pagesArr = [1, \"..\", ...pagesArr, \"..\", maxPage];\r\n  }\r\n\r\n  // maps over the array of pages and turnes them into spans for the\r\n  // current page and non-numbers and links to pages for the rest\r\n  return pagesArr.map((curr, idx) => {\r\n    if (curr === pageInt) {\r\n      return (\r\n        <span key={idx} className=\"current-page\">\r\n          {curr}\r\n        </span>\r\n      );\r\n    } else if (!Number.isInteger(curr)) {\r\n      return (\r\n        <span key={idx} className=\"blank-pages\">\r\n          {curr}\r\n        </span>\r\n      );\r\n    } else {\r\n      return (\r\n        <Link to={\"/main/page=\" + curr} key={idx} className=\"page-link\">\r\n          {curr}\r\n        </Link>\r\n      );\r\n    }\r\n  });\r\n};\r\n","export const CardLoading = () => {\r\n  return (\r\n    <div className=\"card-loading-wrapper\">\r\n      <div className=\"card\">\r\n        <div className=\"image-loading\" />\r\n        <div className=\"name-loading\" />\r\n        <div className=\"artist-loading\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { Card } from \"../components/card\";\r\nimport { HeaderMain } from \"../components/header.main\";\r\nimport auth from \"../authentication/auth\";\r\nimport { fetchCards } from \"../api/fetchCards\";\r\nimport { fetchTypes } from \"../api/fetchTypes\";\r\nimport { fetchSubtypes } from \"../api/fetchSubtypes\";\r\nimport { generatePageLinks } from \"../functions/generatePageLinks\";\r\nimport { CardLoading } from \"../components/card.loading\";\r\n\r\nexport const Main = (props) => {\r\n  const [cards, setCards] = useState({});\r\n  const [typesList, setTypesList] = useState({\r\n    types: [],\r\n    subtypes: [],\r\n    selectedTypes: [],\r\n    selectedSubtypes: []\r\n  });\r\n  const [pageLinks, setPageLinks] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  const logout = () => {\r\n    auth.logout();\r\n    props.history.push(\"/\");\r\n  };\r\n\r\n  // fetches data from api and returnes all cards accordint to serlected types\r\n  const getCardsData = async () => {\r\n    setIsLoaded(false);\r\n    let page = props.match.params.page;\r\n    let cardsData = await fetchCards(\r\n      page,\r\n      typesList.selectedTypes,\r\n      typesList.selectedSubtypes\r\n    );\r\n    setCards(cardsData);\r\n    setPageLinks(generatePageLinks(page, cardsData.totalCount));\r\n    setIsLoaded(true);\r\n  };\r\n\r\n  // fetches dat from api and returnes list of types nd subtypes, runs once on load\r\n  const getTypesData = async () => {\r\n    let typesData = await fetchTypes();\r\n    let subtypesData = await fetchSubtypes();\r\n    setTypesList({\r\n      ...typesList,\r\n      types: typesData,\r\n      subtypes: subtypesData\r\n    });\r\n  };\r\n\r\n  // checks if pressed type is already selected, if it is removes it from the selected array\r\n  // and adds to the types array, if it isn't removes it from the types array and adds the selected array\r\n  const selectType = (val) => {\r\n    if (typesList.selectedTypes.includes(val)) {\r\n      setTypesList({\r\n        ...typesList,\r\n        types: [...typesList.types, val].sort(),\r\n        selectedTypes: typesList.selectedTypes.filter((curr) => curr !== val)\r\n      });\r\n    } else {\r\n      setTypesList({\r\n        ...typesList,\r\n        types: typesList.types.filter((curr) => curr !== val),\r\n        selectedTypes: [...typesList.selectedTypes, val].sort()\r\n      });\r\n    }\r\n  };\r\n\r\n  // does the equivalent of the last function for the subtypes array\r\n  const selectSubtype = (val) => {\r\n    if (typesList.selectedSubtypes.includes(val)) {\r\n      setTypesList({\r\n        ...typesList,\r\n        subtypes: [...typesList.subtypes, val].sort(),\r\n        selectedSubtypes: typesList.selectedSubtypes.filter(\r\n          (curr) => curr !== val\r\n        )\r\n      });\r\n    } else {\r\n      setTypesList({\r\n        ...typesList,\r\n        subtypes: typesList.subtypes.filter((curr) => curr !== val),\r\n        selectedSubtypes: [...typesList.selectedSubtypes, val].sort()\r\n      });\r\n    }\r\n  };\r\n\r\n  // generates the cards that appear while loading\r\n  const generateLoadingTemplates = () => {\r\n    let arr = [];\r\n    for (let i = 1; i <= 18; i++) {\r\n      arr.push(<CardLoading key={i} />);\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  // fetch types on load\r\n  useEffect(() => {\r\n    getTypesData();\r\n  }, []);\r\n\r\n  // fetch cards data when location or any of the selected types change\r\n  useEffect(() => {\r\n    getCardsData();\r\n  }, [\r\n    props.history.location,\r\n    typesList.selectedTypes,\r\n    typesList.selectedSubtypes\r\n  ]);\r\n\r\n  return (\r\n    <div>\r\n      <HeaderMain\r\n        logout={logout}\r\n        types={typesList.types}\r\n        subtypes={typesList.subtypes}\r\n        selectedTypes={typesList.selectedTypes}\r\n        selectedSubtypes={typesList.selectedSubtypes}\r\n        selectType={selectType}\r\n        selectSubtype={selectSubtype}\r\n      />\r\n      <div className=\"card-display\">\r\n        {!isLoaded ? (\r\n          generateLoadingTemplates()\r\n        ) : cards.data.length === 0 ? (\r\n          <h1 className=\"not-found\">Cards not found</h1>\r\n        ) : (\r\n          cards.data.map((card, idx) => {\r\n            return (\r\n              <Card\r\n                key={idx}\r\n                id={card.id}\r\n                name={card.name}\r\n                artist={card.artist}\r\n                imageUrl={card.images.small}\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n      <div id=\"paginator\">{!isLoaded ? \"Loading...\" : pageLinks}</div>\r\n    </div>\r\n  );\r\n};\r\n","const axios = require(\"axios\");\r\n\r\nexport const fetchCard = async (id) => {\r\n  const card = await axios({\r\n    type: \"get\",\r\n    url: `https://api.pokemontcg.io/v2/cards/${id}`,\r\n    headers: {\r\n      \"X-Api-Key\": \"4d6e33b2-b46f-4b28-814d-786e33f19bc1\"\r\n    }\r\n  });\r\n  console.log(card);\r\n  return card.data.data;\r\n};\r\n","import auth from \"../authentication/auth\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const HeaderCardView = (props) => {\r\n  const history = useHistory();\r\n\r\n  const logout = () => {\r\n    auth.logout();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const goBack = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <button id=\"back-button\" className=\"button\" onClick={() => goBack()}>\r\n        Back\r\n      </button>\r\n      <div></div>\r\n      <button id=\"logout-card-view\" className=\"button\" onClick={() => logout()}>\r\n        Log out\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { fetchCard } from \"../api/fetchCard\";\r\nimport { HeaderCardView } from \"../components/header.card.view\";\r\n\r\nexport const CardView = (props) => {\r\n  const [cardData, setCardData] = useState({});\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  // fetches data from api on page load and sets it to state\r\n  const getCardData = async () => {\r\n    const id = props.match.params.id;\r\n    console.log(id);\r\n    setIsLoaded(false);\r\n    let fetchedCardData = await fetchCard(id);\r\n    setCardData(fetchedCardData);\r\n    console.log(cardData);\r\n    setIsLoaded(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCardData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <HeaderCardView />\r\n      {!isLoaded ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        <div className=\"card-view\">\r\n          <div className=\"image-wrapper\">\r\n            <img\r\n              className=\"card-view-image\"\r\n              src={cardData.images.large}\r\n              alt=\"pokemon card\"\r\n            />\r\n          </div>\r\n          <div className=\"info-wrapper\">\r\n            <div id=\"type-info\" className=\"card-view-info\">\r\n              <p className=\"card-view-text\">\r\n                <span className=\"card-view-title\">Pokemon name: </span>\r\n                {cardData.name ? cardData.name : \"-\"}\r\n              </p>\r\n              <p className=\"card-view-text\">\r\n                <span className=\"card-view-title\">Supertype: </span>\r\n                {cardData.supertype ? cardData.supertype : \"-\"}\r\n              </p>\r\n              <p className=\"card-view-text\">\r\n                <span className=\"card-view-title\">Type: </span>\r\n                {cardData.types ? cardData.types.join(\", \") : \"-\"}\r\n              </p>\r\n              <p className=\"card-view-text\">\r\n                <span className=\"card-view-title\">Sub-type: </span>\r\n                {cardData.subtypes ? cardData.subtypes.join(\", \") : \"-\"}\r\n              </p>\r\n            </div>\r\n            <div id=\"stats-info\" className=\"card-view-info\">\r\n              <p className=\"card-view-text\">\r\n                <span className=\"card-view-title\">Attack damage: </span>\r\n                {cardData.attacks\r\n                  ? cardData.attacks\r\n                      .map((curr) => curr.name + \" - \" + curr.damage)\r\n                      .join(\", \")\r\n                  : \"-\"}\r\n              </p>\r\n              <p className=\"card-view-text\">\r\n                <span className=\"card-view-title\">Attack cost: </span>\r\n                {cardData.attacks\r\n                  ? cardData.attacks\r\n                      .map(\r\n                        (curr) => curr.name + \" - \" + curr.convertedEnergyCost\r\n                      )\r\n                      .join(\", \")\r\n                  : \"-\"}\r\n              </p>\r\n              <p className=\"card-view-text\">\r\n                <span className=\"card-view-title\">Weaknesses: </span>\r\n                {cardData.weaknesses\r\n                  ? cardData.weaknesses\r\n                      .map((curr) => curr.type + \" - \" + curr.value)\r\n                      .join(\", \")\r\n                  : \"-\"}\r\n              </p>\r\n              <p className=\"card-view-text\">\r\n                <span className=\"card-view-title\">HP: </span>\r\n                {cardData.hp ? cardData.hp : \"-\"}\r\n              </p>\r\n            </div>\r\n            <div id=\"description\" className=\"card-view-info\">\r\n              <p className=\"card-view-text\">\r\n                <span className=\"card-view-title\">Description: </span>\r\n                {cardData.flavorText\r\n                  ? cardData.flavorText\r\n                  : cardData.rules\r\n                  ? cardData.rules\r\n                  : \"-\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport auth from \"./auth\";\r\n\r\nexport const ProtectedRoute = ({ component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (auth.authenticated && auth.passedOTPCheck) {\r\n          return <Component {...props} />;\r\n        } else if (auth.authenticated) {\r\n          return (\r\n            <Redirect\r\n              exact\r\n              to={{\r\n                pathname: \"/otp\",\r\n                state: {\r\n                  from: props.location\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        } else {\r\n          return (\r\n            <Redirect\r\n              exact\r\n              to={{\r\n                pathname: \"/\",\r\n                state: {\r\n                  from: props.location\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { OTPCheck } from \"./pages/otp.check\";\nimport { Login } from \"./pages/login\";\nimport { Main } from \"./pages/main\";\nimport { CardView } from \"./pages/card.view\";\nimport { ProtectedRoute } from \"./authentication/protected.route\";\nimport \"./styles.scss\";\n\nconst App = () => {\n  return (\n    <>\n      <Route exact path=\"/\" component={Login} />\n      <Route exact path=\"/otp\" component={OTPCheck} />\n      <ProtectedRoute exact path=\"/main/page=:page\" component={Main} />\n      <ProtectedRoute exact path=\"/card/id=:id\" component={CardView} />\n    </>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  rootElement\n);\n"],"sourceRoot":""}